import aipy as a, numpy as n, os

class AntennaArray(a.pol.AntennaArray):
    def __init__(self, *args, **kwargs):
        a.pol.AntennaArray.__init__(self, *args, **kwargs)
        self.array_params = {}
    def get_ant_params(self, ant_prms={'*':'*'}):
        prms = a.fit.AntennaArray.get_params(self, ant_prms)
        for k in ant_prms:
            top_pos = n.dot(self._eq2zen, self[int(k)].pos)
            if ant_prms[k] == '*':
                prms[k].update({'top_x':top_pos[0], 'top_y':top_pos[1], 'top_z':top_pos[2]})
            else:
                for val in ant_prms[k]:
                    if   val == 'top_x': prms[k]['top_x'] = top_pos[0]
                    elif val == 'top_y': prms[k]['top_y'] = top_pos[1]
                    elif val == 'top_z': prms[k]['top_z'] = top_pos[2]
        return prms
    def set_ant_params(self, prms):
        changed = a.fit.AntennaArray.set_params(self, prms)
        for i, ant in enumerate(self):
            ant_changed = False
            top_pos = n.dot(self._eq2zen, ant.pos)
            try:
                top_pos[0] = prms[str(i)]['top_x']
                ant_changed = True
            except(KeyError): pass
            try:
                top_pos[1] = prms[str(i)]['top_y']
                ant_changed = True
            except(KeyError): pass
            try:
                top_pos[2] = prms[str(i)]['top_z']
                ant_changed = True
            except(KeyError): pass
            if ant_changed: ant.pos = n.dot(n.linalg.inv(self._eq2zen), top_pos)
            changed |= ant_changed
        return changed 
    def get_arr_params(self):
        return self.array_params
    def set_arr_params(self, prms):
        for param in prms:
            self.array_params[param] = prms[param]
            if param == 'dish_size_in_lambda':
                FWHM = 2.35*(0.45/prms[param]) #radians
                self.array_params['obs_duration'] = 60.*FWHM / (15.*a.const.deg)# minutes it takes the sky to drift through beam FWHM
            if param == 'antpos':
                bl_lens = n.sum(n.array(prms[param])**2,axis=1)**.5
        return self.array_params

#===========================ARRAY SPECIFIC PARAMETERS==========================

#Set antenna positions here; for regular arrays like Hera we can use an algorithm; otherwise antpos should just be a list of [x,y,z] coords in light-nanoseconds

antpos_dict ={
    0: [-149.785, 265.814, 377.01099],
    1: [-95.364998, 270.18799, 377.285],
    2: [-88.512001, 266.021, 377.30899],
    3: [-78.697998, 258.431, 377.29099],
    4: [-86.940002, 248.452, 377.33899],
    5: [-102.325, 244.088, 377.258],
    6: [-93.346001, 242.27901, 377.26999],
    7: [-148.33, 220.271, 377.21399],
    8: [-132.939, 282.61099, 377.00201],
    9: [-139.867, 275.49799, 377.01801],
    10: [-123.667, 284.854, 377.04999],
    11: [-92.889, 281.358, 377.254],
    12: [-77.834999, 282.83899, 377.25299],
    13: [-83.475998, 277.56299, 377.29999],
    14: [-76.987999, 272.63699, 377.298],
    15: [-176.006, 289.90302, 376.62299],
    16: [-23.620001, 201.54601, 376.80499],
    17: [-23.802, 222.353, 376.87201],
    18: [-40.488998, 235.17, 376.961],
    19: [-54.527, 237.51801, 377.12299],
    20: [-64.850998, 250.813, 377.23901],
    21: [-70.074997, 259.40201, 377.26599],
    22: [-60.056999, 263.67599, 377.17999],
    23: [-50.675999, 264.54599, 377.10001],
    24: [-67.989998, 271.103, 377.23599],
    25: [-60.057999, 271.905, 377.20401],
    26: [-70.885002, 278.81799, 377.25201],
    27: [-45.540001, 273.245, 377.06601],
    28: [-53.155998, 276.26801, 377.09],
    29: [-22.659, 263.694, 376.948],
    30: [-55.097, 284.285, 377.181],
    31: [-14.9, 273.87, 376.91],
    32: [-105.281, 217.17999, 377.255],
    33: [-98.529999, 230.162, 377.26001],
    34: [-81.845001, 229.33701, 377.26999],
    35: [-79.541, 238.12801, 377.26999],
    36: [-75.120003, 247.002, 377.255],
    37: [-71.016998, 235.929, 377.23901],
    38: [-62.567001, 228.987, 377.20999],
    39: [-50.691002, 221.88499, 377.078],
    40: [-160.465, 573.20697, 374.77301],
    41: [-128.04601, 350.49399, 376.57001],
    42: [-69.771004, 294.03101, 377.19199],
    43: [-78.731003, 297.259, 377.19601],
    44: [-103.941, 300.914, 377.04999],
    45: [-100.172, 288.896, 377.15701],
    46: [-395.452, 371.15201, 374.51501],
    47: [-263.547, 389.27399, 375.32199],
    48: [326.14099, 203.608, 373.94501],
    49: [173.425, 193.595, 375.03201],
    50: [-2.5150001, 292.841, 376.892],
    51: [-46.554001, 287.46899, 377.11499],
    52: [-56.140999, 295.922, 377.15601],
    53: [-33.705002, 351.048, 376.97601],
    54: [50.126999, 536.159, 376.181],
    55: [84.879997, 519.14099, 376.314],
    56: [143.44099, 27.773001, 374.78],
    57: [86.373001, 284.121, 376.25],
    58: [100.347, 284.09698, 376.17999],
    59: [114.346, 284.09201, 375.91],
    60: [128.34, 284.104, 375.76999],
    61: [79.369003, 271.98599, 376.23999],
    62: [93.338997, 271.97601, 376.07001],
    63: [107.365, 271.957, 375.95001],
    64: [121.355, 271.991, 375.82999],
    65: [135.367, 271.96201, 375.64999],
    66: [72.379997, 259.84799, 376.23999],
    67: [86.348999, 259.84399, 376.10001],
    68: [100.373, 259.84698, 375.95999],
    69: [114.357, 259.83899, 375.82001],
    70: [128.34599, 259.84799, 375.70001],
    71: [142.36, 259.849, 375.5],
    72: [65.362, 247.72301, 376.23001],
    73: [79.365997, 247.742, 376.07999],
    74: [93.355003, 247.743, 375.94],
    75: [121.369, 247.744, 375.72],
    76: [135.353, 247.72099, 375.59],
    77: [149.358, 247.731, 375.41],
    78: [72.362999, 235.61, 376.09],
    79: [86.344002, 235.606, 375.97],
    80: [100.367, 235.616, 375.85001],
    81: [114.335, 235.59801, 375.73999],
    82: [128.349, 235.61, 375.56],
    83: [142.34, 235.586, 375.44],
    84: [79.374001, 223.474, 375.98999],
    85: [93.343002, 223.48801, 375.87],
    86: [107.357, 223.46201, 375.76999],
    87: [121.372, 223.48801, 375.57001],
    88: [135.35201, 223.48599, 375.48001],
    89: [86.362, 211.341, 375.88],
    90: [100.364, 211.338, 375.75],
    91: [114.359, 211.353, 375.60001],
    92: [128.345, 211.358, 375.48001],
    93: [4.006, 158.45599, 376.41],
    94: [18.021999, 158.439, 376.26001],
    95: [32.013, 158.442, 376.14001],
    96: [-17.013, 146.30901, 376.59],
    97: [-2.9849999, 146.31599, 376.42001],
    98: [11.022, 146.311, 376.31],
    99: [25.002001, 146.32001, 376.14001],
    100: [39.014, 146.304, 376.04001],
    101: [-23.966, 134.201, 376.57001],
    102: [-9.9829998, 134.185, 376.42001],
    103: [4.0050001, 134.20599, 376.29999],
    104: [17.99, 134.18201, 376.14999],
    105: [32.008999, 134.18401, 376.04999],
    106: [46.015999, 134.22099, 375.92001],
    107: [-30.990999, 122.075, 376.60001],
    108: [-16.989, 122.07, 376.45999],
    109: [-2.9719999, 122.058, 376.32001],
    110: [25.014999, 122.055, 376.09],
    111: [39.014, 122.09, 375.95001],
    112: [53.019001, 122.052, 375.81],
    113: [-23.993999, 109.937, 376.48999],
    114: [-9.9799995, 109.944, 376.32999],
    115: [3.9960001, 109.951, 376.22],
    116: [18.025, 109.959, 376.07001],
    117: [32.023998, 109.944, 375.95999],
    118: [46.021999, 109.949, 375.81],
    119: [-16.987, 97.809998, 376.35999],
    120: [-2.9979999, 97.819, 376.23001],
    121: [11.019, 97.833, 376.14001],
    122: [25.004, 97.835999, 376.01001],
    123: [39.021, 97.82, 375.89999],
    124: [-9.9870005, 85.702003, 376.25],
    125: [4.0180001, 85.697998, 376.16],
    126: [18.018, 85.716003, 376.04001],
    127: [32.013, 85.712997, 375.91]}
antpos = []
for pos in antpos_dict.values():
    antpos.append(n.array(pos)*100./a.const.len_ns)

#Set other array parameters here
prms = {
    'name': os.path.basename(__file__)[:-3], #remove .py from filename
#    'loc': ('38:25:59.24',  '-79:51:02.1'), # Green Bank, WV
    'loc': ('-26:42:11.916', '116:40:15.06'), # MWA,  (GPS)
    'antpos': antpos,
    'beam': a.fit.Beam2DGaussian,
    'dish_size_in_lambda': 2.32, #in units of wavelengths at 150 MHz = 2 meters; this will also define the observation duration
    'Trx': 1e5 #receiver temp in mK
}

#=======================END ARRAY SPECIFIC PARAMETERS==========================

def get_aa(freqs):
    '''Return the AntennaArray to be used for simulation.'''
    location = prms['loc']
    antennas = []
    nants = len(prms['antpos'])
    for i in range(nants):
        beam = prms['beam'](freqs, xwidth=(0.45/prms['dish_size_in_lambda']), ywidth=(0.45/prms['dish_size_in_lambda'])) #as it stands, the size of the beam as defined here is not actually used anywhere in this package, but is a necessary parameter for the aipy Beam2DGaussian object
        antennas.append(a.fit.Antenna(0, 0, 0, beam))
    aa = AntennaArray(prms['loc'], antennas)
    p = {}
    for i in range(nants):
        top_pos = prms['antpos'][i]
        p[str(i)] = {'top_x':top_pos[0], 'top_y':top_pos[1], 'top_z':top_pos[2]}
    aa.set_ant_params(p)
    aa.set_arr_params(prms) 
    return aa

def get_catalog(*args, **kwargs): return a.src.get_catalog(*args, **kwargs)
